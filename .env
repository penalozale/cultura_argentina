

DB_USER = postgres
DB_PASSWORD = abc123
DB_HOST = localhost
DB_PORT = 5432
DB_NAME = postgres

DATABASE_URL = 'postgres+psycopg2://DB_USER:DB_PASSWORD@DB_HOST/DB_NAME'



---------------

DB_USER= postgres
DB_PASSWORD= root
DB_HOST= localhost
DB_NAME= db_test
LOG_LEVEL= 20

params = "postgresql+psycopg2://{}:{}@{}/{}".format(
    decouple.config("DB_USER"), decouple.config("DB_PASSWORD"),
    decouple.config("DB_HOST"), decouple.config("DB_NAME"))
engine = create_engine(params, pool_size=1)



-------------
DEBUG = True
TEMPLATE_DEBUG = True
SECRET_KEY = ARANDOMSECRETKEY
DATABASE_URL = mysql://myuser:mypassword@myhost/mydatabase
PERCENTILE = 90%
#COMMENTED=42
---------------------------

# en el archivo settings.py
settings = {'pguser':config('pguser'),
              'pgpasswd':config('pgpasswd'),
              'pghost':config('pghost'),
              'pgport':config('pgport'),
              'pgdb':config('pgdb')
             }
             
              Conexión a la base de datos.
def get_database():
    """
    Conecta la base de datos.
    Retorna:     engine     """
    
    try:
        engine = get_engine(settings['pguser'],
                      settings['pgpasswd'],
                      settings['pghost'],
                      settings['pgport'],
                      settings['pgdb'])
        logger.info("Conectado a la base de datos PostgreSQL!")
    except IOError:
        logger.exception("Error al tratar de conectarse a la base de datos!")
        return None, 'fail'
    return engine

def get_engine(user, passwd, host, port, db):
    """
    Obtiene el Engine de la base de datos PostgreSQL.
    Input:
        db: Nombre de la base de datos
        user: Usuario
        host: Hostname del servidor de la base de datos
        port: Numero de puerto ()
        passwd: Contraseña de la base de datos
    Retorna:  engine de la base de datos     """
    
    url = 'postgresql://{user}:{passwd}@{host}:{port}/{db}'.format(
        user=user, passwd=passwd, host=host, port=port, db=db)

    engine = create_engine(url)
    return engine
